{:agnt {:fn (fn [period] (nth_AND (map_= (apply (fn [period sar] (let [open (take-last (count sar) (map (fn [r] (nth r 1)) period))] (sign (map (fn [n] (- (nth open n) (nth sar n))) (range (count sar)))))) (apply concat [[period] (SAR period 6 6) nil])) 1) (nth_AND (map_= (apply sign (apply concat [(ADL period 10 23) nil])) -1) (map_= (apply (fn [cci thresh] (loop [res [0] cci cci] (if (= 1 (count cci)) res (recur (conj res (cond (and (> (first cci) thresh) (< (second cci) thresh)) 2 (and (< (first cci) (* -1 thresh)) (> (second cci) (* -1 thresh))) 1 :else 0)) (rest cci))))) (apply concat [(CCI period 20) [90]])) 1)))), :wallet 1000, :bid_fn only-long-bids, :atr_dist 2.53716294107371, :atr_candles 14, :closing_fn trailing-stop-ATR, :parents nil, :archive [], :fn_tree {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:indicator {:name "CCI", :args (20), :data [CCI], :method {:desc "reversal at extreme", :fn (fn [cci thresh] (loop [res [0] cci cci] (if (= 1 (count cci)) res (recur (conj res (cond (and (> (first cci) thresh) (< (second cci) thresh)) 2 (and (< (first cci) (* -1 thresh)) (> (second cci) (* -1 thresh))) 1 :else 0)) (rest cci))))), :params [[thresh 100]], :type :flag, :range [1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (1)}, :args [90]}}}, :1 {:indicator {:name "ADL", :args (10 23), :data [ADL], :method {:desc "sign", :fn sign, :type :flag, :range [-1 1], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (-1)}, :args nil}}}}}, :1 {:indicator {:name "SAR", :args (6 6), :data [SAR], :method {:desc "above/below price", :fn (fn [period sar] (let [open (take-last (count sar) (map (fn [r] (nth r 1)) period))] (sign (map (fn [n] (- (nth open n) (nth sar n))) (range (count sar)))))), :period true, :type :flag, :range [-1 1], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (1)}, :args nil}}}}}}, :id 168, :num_trades (56 179 193 181 186 172 184 164 173 185 197 194 172 178 190 181 215 185), :risk (0.0010486103006397522 3.3974790486292845E-4 3.0765061632843644E-4 2.5583254223600637E-4 2.579924164753162E-4 2.1041135448769823E-4 2.0218926723198448E-4 1.5282791632293926E-4 2.0344101795846816E-4 2.1786383128048685E-4 2.1460823185094039E-4 2.1591696302916073E-4 2.207599553362991E-4 2.0926266374822963E-4 2.0338103932281896E-4 2.0967260435639308E-4 2.5486495919463555E-4 2.2063153202060327E-4), :reward (0.001349575997481312 6.557517411107737E-4 4.17233493893241E-4 3.919148427059137E-4 2.7453235100318823E-4 3.081753024675188E-4 2.401411295419885E-4 2.4127164766305935E-4 3.0181539184292343E-4 2.261181790662006E-4 2.748773913706947E-4 2.863786753098933E-4 2.9102788540202683E-4 2.2870537657914496E-4 2.710305618695733E-4 3.3825104404814824E-4 2.7856224806381444E-4 2.775998966115405E-4), :num_won (17 65 66 51 61 54 60 60 64 60 56 61 57 59 64 56 67 48), :num_lost (39 114 127 130 125 118 124 104 109 125 141 133 115 119 126 125 148 137), :exposure (1.7825119890061067 0.9086755228614464 1.418856291376699 1.6639384259638241 1.9257219874040505 1.4919682756528727 1.7400510264237727 1.0979397048606747 1.1480046845683758 2.007282137635932 1.9657959746610145 1.6438716023148037 1.5304131139526294 1.8454841710277436 1.477347862192329 1.3836445278969873 2.021039415463555 2.2684416384707915)}