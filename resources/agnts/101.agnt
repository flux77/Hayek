{:agnt {:fn (fn [period] (nth_AND (map_= (apply (fn [pos neg upper lower] (map (fn [n] (cond (and (> (nth pos n) upper) (< (nth neg n) lower)) 1 (and (> (nth neg n) upper) (> (nth pos n) lower)) 2 :else 0)) (range (count pos)))) (apply concat [(Aroon period 26) [47 47]])) 1) (nth_AND (map_= (apply (fn [cci thresh] (loop [res [0] cci cci] (if (= 1 (count cci)) res (recur (conj res (cond (and (> (first cci) thresh) (< (second cci) thresh)) 2 (and (< (first cci) (* -1 thresh)) (> (second cci) (* -1 thresh))) 1 :else 0)) (rest cci))))) (apply concat [(CCI period 20) [110]])) 1) (map_= (apply (fn [pos neg upper lower] (map (fn [n] (cond (and (> (nth pos n) upper) (< (nth neg n) lower)) 1 (and (> (nth neg n) upper) (> (nth pos n) lower)) 2 :else 0)) (range (count pos)))) (apply concat [(Aroon period 14) [44 47]])) 1)))), :wallet 1000, :bid_fn only-long-bids, :atr_dist 1.566336471394674, :atr_candles 14, :closing_fn trailing-stop-ATR, :parents nil, :archive [], :fn_tree {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:indicator {:name "Aroon", :args (14), :data [Aroon], :method {:desc "one above and other below 50", :fn (fn [pos neg upper lower] (map (fn [n] (cond (and (> (nth pos n) upper) (< (nth neg n) lower)) 1 (and (> (nth neg n) upper) (> (nth pos n) lower)) 2 :else 0)) (range (count pos)))), :params [[upper 50] [lower 50]], :type :flag, :range [1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (1)}, :args [44 47]}}}, :1 {:indicator {:name "CCI", :args (20), :data [CCI], :method {:desc "reversal at extreme", :fn (fn [cci thresh] (loop [res [0] cci cci] (if (= 1 (count cci)) res (recur (conj res (cond (and (> (first cci) thresh) (< (second cci) thresh)) 2 (and (< (first cci) (* -1 thresh)) (> (second cci) (* -1 thresh))) 1 :else 0)) (rest cci))))), :params [[thresh 100]], :type :flag, :range [1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (1)}, :args [110]}}}}}, :1 {:indicator {:name "Aroon", :args (26), :data [Aroon], :method {:desc "one above and other below 50", :fn (fn [pos neg upper lower] (map (fn [n] (cond (and (> (nth pos n) upper) (< (nth neg n) lower)) 1 (and (> (nth neg n) upper) (> (nth pos n) lower)) 2 :else 0)) (range (count pos)))), :params [[upper 50] [lower 50]], :type :flag, :range [1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (1)}, :args [47 47]}}}}}}, :id 101, :num_trades (68 156 158 169 170 156 153 161 151 169 180 160 172 162 156 173 185 171), :risk (6.800483367775499E-4 2.8794924234367715E-4 1.8305927257100527E-4 1.8118736992217796E-4 1.7978593596126174E-4 1.4672604094331833E-4 1.2496154774487378E-4 1.3111031027637521E-4 1.411785532611511E-4 1.563912699658574E-4 1.2988878157577409E-4 1.592075878736076E-4 1.6797899232070474E-4 1.543570741373708E-4 1.4630874863739637E-4 1.6128355129359857E-4 1.5505631145998239E-4 1.5619487717406457E-4), :reward (8.430297750550149E-4 3.8667935364576053E-4 2.2872985453701764E-4 1.8673731771246064E-4 1.9362576252557952E-4 1.0402010207836208E-4 9.961865142316172E-5 1.225436136940465E-4 1.621078679280108E-4 1.84380597019184E-4 1.776183026925483E-4 1.991006786143804E-4 1.5866326624677018E-4 1.5270326729371954E-4 1.580776330888231E-4 1.544707310229684E-4 1.68849815550751E-4 1.227271414120855E-4), :num_won (18 55 52 51 51 37 42 40 41 45 50 43 56 45 46 56 51 48), :num_lost (50 101 106 118 119 119 111 121 110 124 130 117 116 117 110 117 134 123), :exposure (2.240754969291733 1.3674883667122484 1.6314411039611332 2.2449601473661724 2.1665532095065325 4.536648809165786 3.3151976494558113 3.2364696668424044 2.3365412987223464 2.337256955242254 1.9013290127064186 2.175747175312076 2.193050050738959 2.6281585186073495 2.213271668516256 2.181432155046115 2.4128119786963564 3.261294674945684)}