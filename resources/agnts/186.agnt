{:agnt {:fn (fn [period] (nth_AND (map_= (apply (fn [period sar] (let [open (take-last (count sar) (map (fn [r] (nth r 1)) period))] (sign (map (fn [n] (- (nth open n) (nth sar n))) (range (count sar)))))) (apply concat [[period] (SAR period 6 6) nil])) 1) (map_= (apply (fn [cci thresh] (loop [res [0] cci cci] (if (= 1 (count cci)) res (recur (conj res (cond (and (> (first cci) thresh) (< (second cci) thresh)) 2 (and (< (first cci) (* -1 thresh)) (> (second cci) (* -1 thresh))) 1 :else 0)) (rest cci))))) (apply concat [(CCI period 25) [104]])) 2))), :wallet 1000, :bid_fn only-long-bids, :atr_dist 2.4160727702934763, :atr_candles 14, :closing_fn trailing-stop-ATR, :parents nil, :archive [], :fn_tree {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:indicator {:name "CCI", :args (25), :data [CCI], :method {:desc "reversal at extreme", :fn (fn [cci thresh] (loop [res [0] cci cci] (if (= 1 (count cci)) res (recur (conj res (cond (and (> (first cci) thresh) (< (second cci) thresh)) 2 (and (< (first cci) (* -1 thresh)) (> (second cci) (* -1 thresh))) 1 :else 0)) (rest cci))))), :params [[thresh 100]], :type :flag, :range [1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (2)}, :args [104]}}}, :1 {:indicator {:name "SAR", :args (6 6), :data [SAR], :method {:desc "above/below price", :fn (fn [period sar] (let [open (take-last (count sar) (map (fn [r] (nth r 1)) period))] (sign (map (fn [n] (- (nth open n) (nth sar n))) (range (count sar)))))), :period true, :type :flag, :range [-1 1], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (1)}, :args nil}}}}}}, :id 186, :num_trades (17 76 72 70 64 61 55 67 72 61 63 71 82 58 75 63 62 71), :risk (8.200431236566486E-4 3.3230651241496906E-4 2.3963840811384323E-4 2.4443442655962613E-4 2.6876444764211115E-4 2.364515372953088E-4 1.727071945558554E-4 1.6132245090862707E-4 2.0159560536842853E-4 1.692974623378098E-4 2.0703524916665522E-4 1.5367451755237912E-4 1.8752649483005189E-4 2.1890635935101368E-4 2.1179862929318825E-4 2.09540465215242E-4 2.1357377313631603E-4 1.8802569663716736E-4), :reward (0.001142204416674031 6.581370597288803E-4 3.832292281730168E-4 2.768742682229053E-4 3.492062911836491E-4 3.706806879115051E-4 2.2903688662610463E-4 2.645941246071163E-4 2.65682318536195E-4 1.4562127115911618E-4 2.40248741734358E-4 2.6096356616559055E-4 1.6435698709070293E-4 4.3145482979423756E-4 2.0364541114519077E-4 2.4156035432510087E-4 2.2090512497289976E-4 2.485862513638347E-4), :num_won (7 25 23 21 17 20 9 24 23 18 17 20 24 16 17 18 14 19), :num_lost (10 51 49 49 47 41 46 43 49 43 46 51 58 42 58 45 48 52), :exposure (1.0256396837123087 1.0300366394893492 1.332189620109608 2.059949445524568 2.127838667639318 1.307663623336926 3.854076406933885 1.0923751927868137 1.6165407320451617 2.7772922422436954 2.3318042088905377 1.5016273172398003 2.757345685112407 1.3318409103693511 3.5483592982194465 2.168613986768237 3.314784736466393 2.0700929379833855)}