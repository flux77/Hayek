{:agnt {:fn (fn [period] (nth_AND (map_= (apply (fn [period sar] (let [open (take-last (count sar) (map (fn [r] (nth r 1)) period))] (crosses open sar))) (apply concat [[period] (SAR period 6 6) nil])) 1) (map_= (apply (fn [cci thresh] (loop [res [0] cci cci] (if (= 1 (count cci)) res (recur (conj res (cond (and (> (first cci) thresh) (< (second cci) thresh)) 2 (and (< (first cci) (* -1 thresh)) (> (second cci) (* -1 thresh))) 1 :else 0)) (rest cci))))) (apply concat [(CCI period 29) [106]])) 2))), :wallet 1000, :bid_fn only-long-bids, :atr_dist 3.3712309187834055, :atr_candles 14, :closing_fn trailing-stop-ATR, :parents nil, :archive [], :fn_tree {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:indicator {:name "CCI", :args (29), :data [CCI], :method {:desc "reversal at extreme", :fn (fn [cci thresh] (loop [res [0] cci cci] (if (= 1 (count cci)) res (recur (conj res (cond (and (> (first cci) thresh) (< (second cci) thresh)) 2 (and (< (first cci) (* -1 thresh)) (> (second cci) (* -1 thresh))) 1 :else 0)) (rest cci))))), :params [[thresh 100]], :type :flag, :range [1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (2)}, :args [106]}}}, :1 {:indicator {:name "SAR", :args (6 6), :data [SAR], :method {:desc "crossed-price", :fn (fn [period sar] (let [open (take-last (count sar) (map (fn [r] (nth r 1)) period))] (crosses open sar))), :period true, :type :flag, :range [1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (1)}, :args nil}}}}}}, :id 100, :num_trades (1 7 8 5 8 10 6 5 4 8 7 7 8 6 6 6 5 7), :risk (3.548075854467517E-4 4.1767843084829963E-4 4.8271230223269053E-4 1.6420064855556725E-4 3.012526941493329E-4 2.8244997747235587E-4 1.8585943119773493E-4 1.3236958639953287E-4 3.6564475421720425E-4 1.68995484379037E-4 2.2152713964783565E-4 2.0298100624223728E-4 1.8015648706565056E-4 1.4544498463487854E-4 1.8655289319693843E-4 1.969749900754511E-4 1.568314502679742E-4 2.8344722293884006E-4), :reward (nil 2.185783438692073E-4 4.366106161355471E-5 6.530834160086366E-4 2.6682426976400064E-5 1.892029966991857E-4 2.0906911228847232E-4 4.1435716256028464E-4 1.4034069643489793E-4 2.8277820585729955E-4 5.354962793920789E-4 3.6848435717217067E-4 0.0011677443621151903 2.474972671597482E-4 2.569907775210084E-5 9.80406099629488E-4 3.475788537205825E-4 nil), :num_won (0 3 3 3 1 4 1 3 2 2 1 2 1 3 1 1 2 0), :num_lost (1 4 5 2 7 6 5 2 2 6 6 5 7 3 5 5 3 7), :exposure (10 2.5478488152405414 18.426498898308626 0.167615799687673 79.03212331136456 2.2392613943749295 4.444928023162197 0.21297180043360053 2.605407864616246 1.7928766879331406 2.482114048291695 1.377134485436219 1.0799413385094594 0.5876629924200352 36.29563967167813 1.0045581629382523 0.6768167075868077 10)}