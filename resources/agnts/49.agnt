{:agnt {:fn (fn [period] (nth_AND (map_= (apply (fn [d] (binned d [-50 50])) (apply concat [(CMO period 17) nil])) 1) (nth_AND (map_= (apply (fn [macd signal hist] (sign (diff hist))) (apply concat [(MACD period 13 21 8) nil])) -1) (nth_AND (map_= (apply (fn [pos neg upper lower] (map (fn [n] (cond (and (> (nth pos n) upper) (< (nth neg n) lower)) 1 (and (> (nth neg n) upper) (> (nth pos n) lower)) 2 :else 0)) (range (count pos)))) (apply concat [(Aroon period 12) [48 52]])) 1) (map_= (apply (fn [macd signal hist] (sign (diff hist))) (apply concat [(MACD period 13 26 12) nil])) -1))))), :wallet 1000, :bid_fn only-long-bids, :atr_dist 1.2550692683335214, :atr_candles 14, :closing_fn trailing-stop-ATR, :parents nil, :archive [], :fn_tree {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:indicator {:name "MACD", :args (13 26 12), :data [MACD], :method {:desc "sign of angle", :fn (fn [macd signal hist] (sign (diff hist))), :type :flag, :range [-1 1], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (-1)}, :args nil}}}, :1 {:indicator {:name "Aroon", :args (12), :data [Aroon], :method {:desc "one above and other below 50", :fn (fn [pos neg upper lower] (map (fn [n] (cond (and (> (nth pos n) upper) (< (nth neg n) lower)) 1 (and (> (nth neg n) upper) (> (nth pos n) lower)) 2 :else 0)) (range (count pos)))), :params [[upper 50] [lower 50]], :type :flag, :range [1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (1)}, :args [48 52]}}}}}, :1 {:indicator {:name "MACD", :args (13 21 8), :data [MACD], :method {:desc "sign of angle", :fn (fn [macd signal hist] (sign (diff hist))), :type :flag, :range [-1 1], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (-1)}, :args nil}}}}}, :1 {:indicator {:name "CMO", :args (17), :data [CMO], :method {:desc "below/within/above -50/50", :fn (fn [d] (binned d [-50 50])), :type :flag, :range [0 1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (1)}, :args nil}}}}}}, :id 49, :num_trades (169 492 482 502 541 490 513 461 458 521 547 510 526 465 503 497 540 499), :risk (5.240496608887293E-4 1.9139310501473903E-4 1.4634969186555144E-4 1.3511507732366307E-4 1.2589868911583532E-4 9.842746387863465E-5 9.842330343119333E-5 8.823501712294515E-5 1.126495751604353E-4 9.924872225849633E-5 1.0579074218484422E-4 1.035605162879778E-4 1.1003997665598737E-4 1.0075598593439549E-4 1.0405114318520883E-4 1.1855201785071633E-4 1.2540983854224605E-4 1.1637236423565309E-4), :reward (4.7582203141314513E-4 1.965176155178199E-4 1.594198486393926E-4 1.2712790671899418E-4 1.4024543131695264E-4 1.195932727967483E-4 1.0546761865193612E-4 7.401038829750358E-5 1.2814240696495464E-4 1.0600789355242325E-4 9.644305953921095E-5 1.0824074530873734E-4 1.110339700343896E-4 1.2048647696874007E-4 1.2225560469155715E-4 1.5252455031548854E-4 1.257325134667276E-4 1.1721297031840528E-4), :num_won (50 142 125 141 147 149 126 120 131 135 138 141 134 123 131 143 124 137), :num_lost (119 350 357 361 394 341 387 341 327 386 409 369 392 342 372 354 416 362), :exposure (2.6212283386941952 2.400515431938586 2.6218486815495163 2.7211407581155536 2.4060872558088624 1.8835521743239705 2.866283984761246 3.3878285570283007 2.1943865762366657 2.6769499758706345 3.251029469070387 2.503863713870796 2.899184738795193 2.3251637628323665 2.4168501399181053 1.9241389088197216 3.3462289849734006 2.623385956416023)}