{:agnt {:fn (fn [period] (nth_AND (nth_AND (nth_AND (map_= (apply (fn [pos neg] (crosses pos neg)) (apply concat [(DI+ period 14) (DI- period 14) nil])) 1) (map_>= (apply (fn [d] (binned d [15 20 25 30])) (apply concat [(ADX period 15) nil])) 1)) (map_= (apply (fn [period sar] (let [open (take-last (count sar) (map (fn [r] (nth r 1)) period))] (sign (map (fn [n] (- (nth open n) (nth sar n))) (range (count sar)))))) (apply concat [[period] (SAR period 6 6) nil])) 1)) (map_= (apply (fn [d] (binned d [15 20 25 30])) (apply concat [(ADX period 17) nil])) 0))), :wallet 1000, :bid_fn only-long-bids, :atr_dist 2.6529801628606307, :atr_candles 14, :closing_fn trailing-stop-ATR, :parents nil, :archive [], :fn_tree {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:indicator {:name "ADX", :args (17), :data [ADX], :method {:desc "which-bin", :fn (fn [d] (binned d [15 20 25 30])), :type :scale, :range [0 1 2 3 4], :protocol {:desc "scale_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (0)}, :args nil}}}, :1 {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:indicator {:name "SAR", :args (6 6), :data [SAR], :method {:desc "above/below price", :fn (fn [period sar] (let [open (take-last (count sar) (map (fn [r] (nth r 1)) period))] (sign (map (fn [n] (- (nth open n) (nth sar n))) (range (count sar)))))), :period true, :type :flag, :range [-1 1], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (1)}, :args nil}}}, :1 {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:indicator {:name "ADX", :args (15), :data [ADX], :method {:desc "which-bin", :fn (fn [d] (binned d [15 20 25 30])), :type :scale, :range [0 1 2 3 4], :protocol {:desc "scale_>=", :fn map_>=, :param-fns [(fn [range] (rand-nth (drop-last (drop 1 range))))], :params (1)}, :args nil}}}, :1 {:indicator {:name "DI", :args (14), :data [DI+ DI-], :method {:desc "which-crossed", :fn (fn [pos neg] (crosses pos neg)), :type :flag, :range [1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (1)}, :args nil}}}}}}}}}}, :id 123, :num_trades (4 10 18 18 20 17 18 16 17 27 21 14 22 18 18 28 14 14), :risk (7.184551579939385E-4 3.535493072536889E-4 2.566222876558123E-4 2.2813923324874338E-4 2.4429120979879574E-4 2.9012802938457557E-4 1.5591882920744637E-4 1.2027283930203918E-4 1.989689312755532E-4 1.8066285340284627E-4 2.3579695647978592E-4 1.9477800007238448E-4 1.4914862879643448E-4 1.414417503588608E-4 1.9150701589067985E-4 2.17225685024001E-4 1.6560701540178425E-4 1.9219149165334307E-4), :reward (4.5937799101808635E-4 9.825836078951353E-4 3.2983925883289556E-4 5.832237613212111E-5 1.4422887032406774E-4 2.9492513226498995E-4 1.757764294156059E-4 1.0563466862226916E-4 3.005681750152444E-4 4.905961097497957E-4 3.036342150399654E-4 1.0463644581500298E-4 3.119451111641524E-4 2.5184595603275855E-4 4.513121949051331E-4 2.0759720632864347E-4 1.0891677199921755E-4 3.459165386560143E-4), :num_won (1 1 8 3 7 4 6 3 5 4 6 5 6 4 7 11 3 5), :num_lost (3 9 10 15 13 13 12 13 12 23 15 9 16 14 11 17 11 9), :exposure (4.691921502823926 3.2383440347630836 0.9725278328141014 19.558465239132758 3.145581562978612 3.1971371454795565 1.7740584414624987 4.933818702132964 1.5887425042159178 2.117447298137281 1.9414557451039363 3.3506527997916984 1.2749989102448147 1.965670340927056 0.6668102475336346 1.617133622590081 5.575135142127036 1.0000813673729292)}