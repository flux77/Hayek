{:agnt {:fn (fn [period] (nth_AND (map_= (apply (fn [d] (binned d [-50 50])) (apply concat [(CMO period 15) nil])) 1) (nth_AND (nth_AND (map_= (apply (fn [d] (binned d [-50 50])) (apply concat [(CMO period 15) nil])) 1) (map_<= (apply (fn [d] (binned d [15 20 25 30])) (apply concat [(ADX period 15) nil])) 2)) (map_= (apply (fn [pos neg upper lower] (map (fn [n] (cond (and (> (nth pos n) upper) (< (nth neg n) lower)) 1 (and (> (nth neg n) upper) (> (nth pos n) lower)) 2 :else 0)) (range (count pos)))) (apply concat [(Aroon period 29) [55 52]])) 2)))), :wallet 1000, :bid_fn only-long-bids, :atr_dist 2.0975750756307, :atr_candles 14, :closing_fn trailing-stop-ATR, :parents nil, :archive [], :fn_tree {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:indicator {:name "Aroon", :args (29), :data [Aroon], :method {:desc "one above and other below 50", :fn (fn [pos neg upper lower] (map (fn [n] (cond (and (> (nth pos n) upper) (< (nth neg n) lower)) 1 (and (> (nth neg n) upper) (> (nth pos n) lower)) 2 :else 0)) (range (count pos)))), :params [[upper 50] [lower 50]], :type :flag, :range [1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (2)}, :args [55 52]}}}, :1 {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:indicator {:name "ADX", :args (15), :data [ADX], :method {:desc "which-bin", :fn (fn [d] (binned d [15 20 25 30])), :type :scale, :range [0 1 2 3 4], :protocol {:desc "scale_<=", :fn map_<=, :param-fns [(fn [range] (rand-nth (drop-last (drop 1 range))))], :params (2)}, :args nil}}}, :1 {:indicator {:name "CMO", :args (15), :data [CMO], :method {:desc "below/within/above -50/50", :fn (fn [d] (binned d [-50 50])), :type :flag, :range [0 1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (1)}, :args nil}}}}}}}, :1 {:indicator {:name "CMO", :args (15), :data [CMO], :method {:desc "below/within/above -50/50", :fn (fn [d] (binned d [-50 50])), :type :flag, :range [0 1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (1)}, :args nil}}}}}}, :id 83, :num_trades (28 136 146 153 139 146 156 111 138 138 162 131 165 125 142 159 155 169), :risk (8.330399844264416E-4 3.3378821485906257E-4 2.1257470767905497E-4 2.3110697549606242E-4 2.083531112270968E-4 1.9344995752605193E-4 1.584994256162583E-4 1.4951066211803894E-4 1.8450655134615832E-4 1.4324688633549892E-4 1.6829235970185457E-4 1.8216980524101312E-4 1.7088114627517893E-4 1.7963632774029438E-4 1.7659694229217278E-4 2.0415917033949184E-4 2.000059902426789E-4 2.0881188464312591E-4), :reward (0.0018317394073053936 5.630412179969125E-4 3.1930644017559475E-4 2.9466418243715635E-4 2.4949367152841956E-4 1.9119593284740134E-4 1.6187738621132076E-4 1.6799643453824397E-4 1.9568977330123024E-4 1.9024022477101885E-4 3.2416488822063706E-4 2.4204812942879686E-4 1.7039079955350576E-4 1.7122522071713747E-4 2.0495726642233476E-4 2.4144994664013347E-4 2.4875893180009994E-4 2.2982769716995796E-4), :num_won (5 49 47 43 42 42 41 42 52 42 40 38 43 43 43 48 40 53), :num_lost (23 87 99 110 97 104 115 69 86 96 122 93 122 82 99 111 115 116), :exposure (2.0919918592561837 1.052577258185222 1.4023010175304578 2.006364960661508 1.928692091544815 2.5053824906818494 2.7463475292033586 1.4620825725798683 1.5593326373450476 1.7210947625573858 1.583427804004774 1.8419337908881266 2.84537415796181 2.0006532797971044 1.98374844148078 1.9553455611805883 2.3115440229088127 1.9885429115572304)}