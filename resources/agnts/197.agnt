{:agnt {:fn (fn [period] (nth_AND (map_<= (apply (fn [d] (binned d [15 20 25 30])) (apply concat [(ADX period 16) nil])) 2) (nth_AND (map_= (apply (fn [pos neg upper lower] (map (fn [n] (cond (and (> (nth pos n) upper) (< (nth neg n) lower)) 1 (and (> (nth neg n) upper) (> (nth pos n) lower)) 2 :else 0)) (range (count pos)))) (apply concat [(Aroon period 21) [58 55]])) 2) (map_= (apply (fn [macd signal hist] (crosses signal macd)) (apply concat [(MACD period 17 19 10) nil])) 1)))), :wallet 1000, :bid_fn only-long-bids, :atr_dist 1.590682675982324, :atr_candles 14, :closing_fn trailing-stop-ATR, :parents nil, :archive [], :fn_tree {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:gate {:name :AND, :num-inp 2, :fn nth_AND, :0 {:indicator {:name "MACD", :args (17 19 10), :data [MACD], :method {:desc "which-crossed", :fn (fn [macd signal hist] (crosses signal macd)), :type :flag, :range [1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (1)}, :args nil}}}, :1 {:indicator {:name "Aroon", :args (21), :data [Aroon], :method {:desc "one above and other below 50", :fn (fn [pos neg upper lower] (map (fn [n] (cond (and (> (nth pos n) upper) (< (nth neg n) lower)) 1 (and (> (nth neg n) upper) (> (nth pos n) lower)) 2 :else 0)) (range (count pos)))), :params [[upper 50] [lower 50]], :type :flag, :range [1 2], :protocol {:desc "flag_=", :fn map_=, :param-fns [(fn [range] (rand-nth range))], :params (2)}, :args [58 55]}}}}}, :1 {:indicator {:name "ADX", :args (16), :data [ADX], :method {:desc "which-bin", :fn (fn [d] (binned d [15 20 25 30])), :type :scale, :range [0 1 2 3 4], :protocol {:desc "scale_<=", :fn map_<=, :param-fns [(fn [range] (rand-nth (drop-last (drop 1 range))))], :params (2)}, :args nil}}}}}}, :id 197, :num_trades (4 20 20 27 18 23 24 16 21 17 28 25 20 28 24 25 33 26), :risk (7.270421546534776E-4 2.520057548962595E-4 2.2444949784752595E-4 1.3775480594652002E-4 2.210354888195714E-4 1.155735360410294E-4 1.545916857919113E-4 1.2733688180711304E-4 1.7905809324138716E-4 1.1181807088513857E-4 1.0480587913331969E-4 1.2978634649560056E-4 9.314648778310851E-5 1.2481177253997858E-4 8.079639812054153E-5 1.5751567850549788E-4 1.3816703219201568E-4 1.7680394617918153E-4), :reward (2.9054087772216036E-5 1.1585777220566582E-4 7.953020713252315E-5 1.1079512146988226E-4 5.0053862467135175E-5 1.817696475110702E-4 6.991915757168258E-5 1.385582422152024E-4 3.572668313653938E-5 7.01522370133236E-5 7.381873043679535E-5 1.3250576048515173E-4 3.393992618355729E-4 7.638902240677856E-5 4.9288094514875025E-5 1.2185957974053557E-4 1.9063874171052763E-4 1.7346896883523553E-4), :num_won (1 3 5 10 8 6 5 4 6 3 7 6 3 7 8 9 6 5), :num_lost (3 17 15 17 10 17 19 12 15 14 21 19 17 21 16 16 27 21), :exposure (75.07124233465728 12.325738566281258 8.46657537834097 2.11365958177809 5.519940867817666 1.8015018271755574 8.401823282939281 2.757040211494726 12.52971711347141 7.438361003820033 4.259320575408269 3.1016772080797423 1.5551892911697909 4.901690135868389 3.278536081209525 2.2979553474162686 3.2614128654298375 4.280745881748321)}